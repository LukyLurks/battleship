{"version":3,"sources":["utils.js","components.js","entities/player.js","entities/ship.js","entities/gameboard.js","entities/game.js","App.js","index.js"],"names":["getNewShipCoordinates","ship","x0","y0","vertical","size","Math","floor","x","y","coordinates","i","push","getRandomNaturalInt","max","random","isValidPoint","board","point","every","coordinate","isSamePoint","a","b","xa","ya","xb","yb","isAlignmentSpecified","isShipAlreadyThere","newShip","placedShips","some","isEveryPointValid","positioning","newPoint","isShipOverlapping","canAddShip","arguments","wasAttackedAt","targetPoint","attackedAt","attackedPoint","isValidSize","canReceiveAttack","length","findTargetShip","targetPosition","find","hitPosition","placedShip","positionToHit","findIndex","hit","findPointToAttack","attackable","j","findSpotForShip","found","PlayerArea","props","className","name","onClick","onDragOver","dragOverCell","onDrop","dropOnCell","onDoubleClick","rotateShip","onDragLeave","leaveCell","ships","ready","onDragStart","dragShips","removeShip","Board","coords","this","shipIndex","map","list","utils","withShip","flat","withSunk","filter","isSunk","cells","cell","row","col","key","attacked","sunk","shipName","getShipName","makeCells","classes","React","Component","Ships","Object","entries","DraggableShip","PureComponent","isPlaced","draggable","Array","fill","GameStatus","currentTurn","turn","lastPlayer","player","isAllSunk","Winner","RestartButton","restart","Instructions","ReadyButton","setReady","LastMove","cols","rows","rowNumber","colNumber","move","attackedShip","slice","formatCoords","damage","formatDamage","emptyBoard","gameover","values","document","querySelectorAll","allShipsPlaced","playerShip","Player","ownBoard","enemyBoard","fields","assign","create","PlayerProto","attack","receiveAttack","ComputerProto","attackRandom","addShipRandom","addShip","Ship","isSizeValid","damagedAt","ShipProto","deepClone","from","position","shipSize","isPositionValid","damagedShip","GameBoard","GameBoardProto","targetShip","undefined","recordAttack","makePlayerShips","patrolBoat","submarine","destroyer","battleship","carrier","startGame","playerBoard","cpuBoard","cpuShips","cpu","forEach","playerShips","App","game","state","selectedShipName","playerTurn","playerReady","handleAttack","bind","makeCpuAttack","setState","target","type","shouldAcceptAttack","receiving","boardName","getAttribute","newBoard","setTimeout","querySelector","axis","classList","contains","event","selected","verticalOk","horizontOk","align","add","preventDefault","remove","parentNode","origin","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.62a0cd21.chunk.js","sourcesContent":["function getNewShipCoordinates(ship, x0, y0, vertical) {\n  // I need my function to work with just the size and it's\n  // simpler to do that than change all my function calls\n  // throughout the project\n  const size = typeof ship === \"object\" ? ship.size : ship;\n  const [x, y] = [Math.floor(x0), Math.floor(y0)];\n  const coordinates = [];\n  for (let i = 0; i < size; i++) {\n    if (vertical) coordinates.push([x + i, y]);\n    else coordinates.push([x, y + i]);\n  }\n  return coordinates;\n}\n\nfunction findTargetShip(board, ...targetPosition) {\n  return board.placedShips.find(({ coordinates }) =>\n    coordinates.find((point) => isSamePoint(point, targetPosition))\n  );\n}\n\nfunction hitPosition(placedShip, ...targetPoint) {\n  const positionToHit = placedShip.coordinates.findIndex((point) =>\n    isSamePoint(point, targetPoint)\n  );\n  return placedShip.ship.hit(positionToHit);\n}\n\nfunction findPointToAttack(board) {\n  const attackable = [];\n  for (let i = 0; i < board.size; i++) {\n    for (let j = 0; j < board.size; j++) {\n      if (!wasAttackedAt(board, i, j)) {\n        attackable.push([i, j]);\n      }\n    }\n  }\n\n  return attackable[getRandomNaturalInt(attackable.length)];\n}\n\nfunction getRandomNaturalInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nfunction isValidSize(size) {\n  return typeof size === \"number\" && size >= 1;\n}\n\nfunction isValidPoint(board, ...point) {\n  return point.every(\n    (coordinate) =>\n      typeof coordinate === \"number\" &&\n      coordinate >= 0 &&\n      coordinate < board.size\n  );\n}\n\nfunction isSamePoint(a, b) {\n  const [xa, ya] = a;\n  const [xb, yb] = b;\n  return xa === xb && ya === yb;\n}\n\nfunction isAlignmentSpecified(vertical) {\n  return vertical === true || vertical === false;\n}\n\nfunction isShipAlreadyThere(board, newShip) {\n  return board.placedShips.some(({ ship }) => newShip === ship);\n}\n\nfunction isEveryPointValid(board, ship, ...positioning) {\n  return getNewShipCoordinates(ship, ...positioning).every((newPoint) =>\n    isValidPoint(board, ...newPoint)\n  );\n}\n\nfunction isShipOverlapping(board, ship, ...positioning) {\n  return getNewShipCoordinates(ship, ...positioning).some((newPoint) =>\n    board.placedShips.some(({ coordinates }) =>\n      coordinates.some((point) => isSamePoint(point, newPoint))\n    )\n  );\n}\n\nfunction canAddShip(board, newShip, x0, y0, vertical) {\n  if (!isAlignmentSpecified(vertical)) return false;\n  if (isShipAlreadyThere(board, newShip)) return false;\n  if (!isEveryPointValid(...arguments)) return false;\n  if (isShipOverlapping(...arguments)) return false;\n  return true;\n}\n\nfunction canReceiveAttack(board, ...targetPoint) {\n  if (targetPoint.length !== 2) return false;\n  if (wasAttackedAt(board, ...targetPoint)) return false;\n  if (!isValidPoint(board, ...targetPoint)) return false;\n  return true;\n}\n\nfunction wasAttackedAt(board, ...targetPoint) {\n  return board.attackedAt.some((attackedPoint) =>\n    isSamePoint(attackedPoint, targetPoint)\n  );\n}\n\nfunction findSpotForShip(ship, board) {\n  let found = false;\n  let vertical = true;\n  let [x, y] = [0, 0];\n  while (!found) {\n    vertical = Math.random() < 0.5;\n    [x, y] = [getRandomNaturalInt(board.size), getRandomNaturalInt(board.size)];\n    if (canAddShip(board, ship, x, y, vertical)) {\n      found = true;\n    }\n  }\n  return [x, y, vertical];\n}\n\nexport default {\n  isValidSize,\n  isValidPoint,\n  isSamePoint,\n  canAddShip,\n  canReceiveAttack,\n  wasAttackedAt,\n  getNewShipCoordinates,\n  findTargetShip,\n  hitPosition,\n  findPointToAttack,\n  findSpotForShip,\n};\n","import React from \"react\";\nimport utils from \"./utils\";\nimport \"./components.css\";\n\nfunction PlayerArea(props) {\n  return (\n    <div className={`${props.className} PlayerArea`}>\n      <p>{props.name}</p>\n      <Board\n        board={props.board}\n        onClick={props.onClick}\n        onDragOver={props.dragOverCell}\n        onDrop={props.dropOnCell}\n        onDoubleClick={props.rotateShip}\n        onDragLeave={props.leaveCell}\n      />\n      <Ships\n        board={props.board}\n        ships={props.ships}\n        ready={props.ready}\n        onDragStart={props.dragShips}\n        onDoubleClick={props.removeShip}\n      />\n    </div>\n  );\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.size = this.props.board.size;\n  }\n\n  getShipName(coords) {\n    const placedShips = this.props.board.placedShips;\n    const coordsLists = placedShips.map((ship) => ship.coordinates);\n    const shipIndex = coordsLists.findIndex((list) =>\n      list.some((point) => utils.isSamePoint(point, coords))\n    );\n    if (shipIndex < 0) return null;\n    return placedShips[shipIndex].ship.name;\n  }\n\n  makeCells() {\n    const withShip = this.props.board.placedShips\n      .map((ship) => ship.coordinates)\n      .flat();\n    const withSunk = this.props.board.placedShips\n      .filter(({ ship }) => ship.isSunk())\n      .map((ship) => ship.coordinates)\n      .flat();\n    const cells = [];\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        const cell = { row: i, col: j, key: `${i}${j}` };\n        cell.ship = withShip.some((point) => utils.isSamePoint(point, [i, j]));\n        cell.attacked = utils.wasAttackedAt(this.props.board, i, j);\n        cell.sunk = withSunk.some((point) => utils.isSamePoint(point, [i, j]));\n        cell.shipName = this.getShipName([i, j]);\n        cells.push(cell);\n      }\n    }\n    return cells;\n  }\n\n  render() {\n    return (\n      <div\n        className=\"board\"\n        onClick={this.props.onClick}\n        onDragOver={this.props.onDragOver}\n        onDrop={this.props.onDrop}\n        onDoubleClick={this.props.onDoubleClick}\n        onDragLeave={this.props.onDragLeave}\n      >\n        {this.makeCells().map((cell) => {\n          let classes = \"cell\";\n          classes += cell.ship ? \" cellWithShip\" : \"\";\n          classes += cell.attacked ? \" attacked\" : \"\";\n          classes += cell.sunk ? \" sunk\" : \"\";\n          return (\n            <div\n              key={cell.key}\n              row={cell.row}\n              col={cell.col}\n              name={cell.shipName}\n              className={classes}\n            ></div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nclass Ships extends React.PureComponent {\n  render() {\n    if (!this.props.ships) return null;\n    if (Object.entries(this.props.ships).length === 0) return null;\n    if (this.props.ready) return null;\n    return (\n      <div\n        className=\"playerShips\"\n        onDragStart={this.props.onDragStart}\n        onDoubleClick={this.props.onDoubleClick}\n      >\n        {Object.entries(this.props.ships).map(([name, ship]) => {\n          return (\n            <DraggableShip\n              key={name}\n              name={name}\n              board={this.props.board}\n              ship={ship}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nfunction DraggableShip(props) {\n  const isPlaced = props.board.placedShips.some(\n    ({ ship }) => ship.name === props.name\n  );\n  const classes = \"ship\" + (isPlaced ? \" placed\" : \"\");\n  return (\n    <div name={props.name} className={classes} draggable={true}>\n      {Array(props.ship.size)\n        .fill(1)\n        .map((cell, i) => {\n          let classes = \"cell cellWithShip\";\n          classes += isPlaced ? \" placed\" : \"\";\n          return <div key={props.name + i} className={classes}></div>;\n        })}\n    </div>\n  );\n}\n\nclass GameStatus extends React.PureComponent {\n  render() {\n    const currentTurn = this.props.turn ? \"Player\" : \"CPU\";\n    const lastPlayer = this.props.turn ? \"CPU\" : \"Player\";\n\n    const turn = `Turn: ${currentTurn}`;\n    return (\n      <div className=\"GameStatus\">\n        <h1>Battleship</h1>\n        <LastMove board={this.props.board} player={lastPlayer} />\n        <p>{!this.props.ready || this.props.board.isAllSunk() ? \"\" : turn}</p>\n        <Winner board={this.props.board} player={lastPlayer} />\n        <RestartButton\n          onClick={this.props.restart}\n          board={this.props.board}\n          ships={this.props.ships}\n        />\n        <Instructions ships={this.props.ships} ready={this.props.ready} />\n        <ReadyButton\n          board={this.props.board}\n          ships={this.props.ships}\n          ready={this.props.ready}\n          onClick={this.props.setReady}\n        />\n      </div>\n    );\n  }\n}\n\nclass LastMove extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.cols = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"];\n    this.rows = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  }\n\n  formatCoords(rowNumber, colNumber) {\n    return `${this.cols[colNumber]}${this.rows[rowNumber]}`;\n  }\n\n  formatDamage(move) {\n    const attackedShip = utils.findTargetShip(this.props.board, ...move);\n    if (attackedShip) {\n      return attackedShip.ship.isSunk() ? \"and sunk a ship\" : \"and hit a ship\";\n    }\n    return \"\";\n  }\n\n  render() {\n    const coords = this.props.board.attackedAt.slice(-1).flat();\n    const move = `${this.props.player} attacked ${this.formatCoords(\n      ...coords\n    )}`;\n    const damage = this.formatDamage(coords);\n    return <p>{`${coords.length > 0 ? move : \"\"} ${damage ? damage : \"\"}`}</p>;\n  }\n}\n\nfunction Winner(props) {\n  if (props.board.isAllSunk() && props.board.placedShips.length > 0) {\n    return <p>{`${props.player} wins!`}</p>;\n  }\n  return null;\n}\n\nfunction RestartButton(props) {\n  const emptyBoard = props.board.placedShips.length === 0;\n  const gameover = props.board.isAllSunk();\n  const beforeFirstGame = Object.values(props.ships).length === 0;\n  if (beforeFirstGame || (!emptyBoard && gameover)) {\n    return <button onClick={props.onClick}>New Game</button>;\n  }\n  return null;\n}\n\nfunction ReadyButton(props) {\n  const ships = document.querySelectorAll(\".playerShips .ship\");\n  const emptyBoard = ships.length === 0;\n  const allShipsPlaced = Object.values(props.ships).every((playerShip) =>\n    props.board.placedShips.some(({ ship }) => playerShip === ship)\n  );\n  if (!props.ready && !emptyBoard && allShipsPlaced) {\n    return <button onClick={props.onClick}>Start</button>;\n  }\n  return null;\n}\n\nfunction Instructions(props) {\n  if (Object.values(props.ships).length === 0 || props.ready) return null;\n  return (\n    <ul>\n      <li key=\"placement\">Drag and drop the ships below onto your board.</li>\n      <li key=\"rotation\">\n        Double-click a ship you placed to rotate it (if it fits).\n      </li>\n      <li key=\"removal\">Double click a ship in the zone below to remove it.</li>\n    </ul>\n  );\n}\n\nexport { PlayerArea, GameStatus, Board };\n","import utils from \"../utils\";\n\nconst Player = function (ownBoard, enemyBoard, name) {\n  const fields = {\n    ownBoard,\n    enemyBoard,\n    name,\n  };\n  return Object.assign(Object.create(PlayerProto), fields);\n};\n\nconst PlayerProto = {\n  attack: function (x, y) {\n    this.enemyBoard.receiveAttack(x, y);\n    return this;\n  },\n};\n\nfunction Computer(ownBoard, enemyBoard, name) {\n  return Object.assign(\n    Object.create(ComputerProto),\n    Player(ownBoard, enemyBoard, name)\n  );\n}\n\nconst ComputerProto = {\n  attackRandom: function () {\n    return utils.findPointToAttack(this.enemyBoard);\n  },\n\n  addShipRandom: function (ship) {\n    const positioning = utils.findSpotForShip(ship, this.ownBoard);\n    return this.ownBoard.addShip(ship, ...positioning);\n  },\n};\n\nexport { Player, Computer };\n","const Ship = function (size, name) {\n  if (!isSizeValid(size)) {\n    return null;\n  }\n  const fields = {\n    size: Math.floor(size),\n    name: name,\n    damagedAt: Array(Math.floor(size)).fill(false),\n  };\n  return Object.assign(Object.create(ShipProto), fields);\n};\n\nconst ShipProto = {\n  deepClone: function () {\n    const fields = {\n      size: this.size,\n      name: this.name,\n      damagedAt: Array.from(this.damagedAt),\n    };\n    return Object.assign(Object.create(ShipProto), fields);\n  },\n  hit: function (position) {\n    if (!isPositionValid(position, this.size)) {\n      return this;\n    }\n    const damagedShip = this.deepClone();\n    damagedShip.damagedAt[Math.floor(position)] = true;\n    return damagedShip;\n  },\n  isSunk: function () {\n    return this.damagedAt.every((position) => position === true);\n  },\n};\n\nfunction isSizeValid(size) {\n  return typeof size === \"number\" && size >= 1;\n}\n\nfunction isPositionValid(position, shipSize) {\n  return typeof position === \"number\" && position >= 0 && position < shipSize;\n}\n\nexport { Ship };\n","import utils from \"../utils\";\n\nconst GameBoard = function (size) {\n  if (!utils.isValidSize(size)) {\n    return null;\n  }\n  const fields = {\n    size: Math.floor(size),\n    placedShips: [],\n    attackedAt: [],\n  };\n\n  return Object.assign(Object.create(GameBoardProto), fields);\n};\n\nconst GameBoardProto = {\n  deepClone: function () {\n    const fields = {\n      size: this.size,\n      placedShips: Array.from(this.placedShips),\n      attackedAt: Array.from(this.attackedAt),\n    };\n    return Object.assign(Object.create(GameBoardProto), fields);\n  },\n\n  addShip: function (ship, ...positioning) {\n    if (!utils.canAddShip(this, ...arguments)) return this;\n\n    const board = this.deepClone();\n    board.placedShips.push({\n      ship,\n      coordinates: utils.getNewShipCoordinates(...arguments),\n    });\n    return board;\n  },\n\n  removeShip: function (name) {\n    const board = this.deepClone();\n    board.placedShips = board.placedShips.filter(\n      ({ ship }) => ship.name !== name\n    );\n    return board;\n  },\n\n  receiveAttack: function (...coordinates) {\n    if (!utils.canReceiveAttack(this, ...coordinates)) return this;\n\n    const targetShip = utils.findTargetShip(this, ...coordinates);\n    if (targetShip !== undefined) {\n      targetShip.ship = utils.hitPosition(targetShip, ...coordinates);\n    }\n\n    return this.recordAttack(coordinates);\n  },\n\n  recordAttack: function (coordinates) {\n    const board = this.deepClone();\n    board.attackedAt.push(coordinates);\n    return board;\n  },\n\n  isAllSunk: function () {\n    return this.placedShips.every(({ ship }) => ship.isSunk());\n  },\n};\n\nexport { GameBoard };\n","import { Player, Computer } from \"./player\";\nimport { Ship } from \"./ship\";\nimport { GameBoard } from \"./gameboard\";\n\nconst boardSize = 10;\n\nconst makePlayerShips = function () {\n  return {\n    patrolBoat: Ship(2, \"patrolBoat\"),\n    submarine: Ship(3, \"submarine\"),\n    destroyer: Ship(3, \"destroyer\"),\n    battleship: Ship(4, \"battleship\"),\n    carrier: Ship(5, \"carrier\"),\n  };\n};\n\nconst startGame = function () {\n  const playerBoard = GameBoard(boardSize);\n  const cpuBoard = GameBoard(boardSize);\n  const cpuShips = Object.values(makePlayerShips());\n\n  const player = Player(playerBoard, cpuBoard, \"Player\");\n  const cpu = Computer(cpuBoard, playerBoard, \"CPU\");\n  cpuShips.forEach((ship) => {\n    cpu.ownBoard = cpu.addShipRandom(ship);\n  });\n  return { player, cpu, playerShips: makePlayerShips() };\n};\n\nconst startEmptyGame = function () {\n  const player = Player(GameBoard(boardSize), GameBoard(boardSize), \"\");\n  const cpu = Player(GameBoard(boardSize), GameBoard(boardSize), \"\");\n  return { player, cpu };\n};\n\nexport { startGame, startEmptyGame };\n","import React from \"react\";\nimport { PlayerArea, GameStatus } from \"./components\";\nimport { startGame, startEmptyGame } from \"./entities/game.js\";\nimport utils from \"./utils.js\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.game = startEmptyGame();\n    this.state = {\n      playerBoard: this.game.player.ownBoard,\n      playerShips: {},\n      selectedShipName: \"\",\n      cpuBoard: this.game.cpu.ownBoard,\n      playerTurn: true,\n      playerReady: false,\n    };\n    this.handleAttack = this.handleAttack.bind(this);\n    this.makeCpuAttack = this.makeCpuAttack.bind(this);\n    this.restart = this.restart.bind(this);\n    this.setReady = this.setReady.bind(this);\n    this.dragShips = this.dragShips.bind(this);\n    this.dragOverCell = this.dragOverCell.bind(this);\n    this.leaveCell = this.leaveCell.bind(this);\n    this.dropOnCell = this.dropOnCell.bind(this);\n    this.removeShip = this.removeShip.bind(this);\n    this.rotateShip = this.rotateShip.bind(this);\n  }\n\n  restart() {\n    this.game = startGame();\n    this.setState({\n      playerBoard: this.game.player.ownBoard,\n      playerShips: this.game.playerShips,\n      cpuBoard: this.game.cpu.ownBoard,\n      playerTurn: true,\n      playerReady: false,\n    });\n  }\n\n  setReady() {\n    this.setState({ playerReady: true });\n  }\n\n  handleAttack({ target, type }) {\n    if (!this.shouldAcceptAttack(type)) return;\n    const receiving = this.state.playerTurn\n      ? { board: this.state.cpuBoard, boardName: \"cpuBoard\" }\n      : { board: this.state.playerBoard, boardName: \"playerBoard\" };\n    const coords = [+target.getAttribute(\"row\"), +target.getAttribute(\"col\")];\n    const newBoard = receiving.board.receiveAttack(...coords);\n    if (newBoard === receiving.board) return;\n    this.setState(\n      {\n        [receiving.boardName]: newBoard,\n        playerTurn: !this.state.playerTurn,\n      },\n      () => {\n        if (!newBoard.isAllSunk() && !this.state.playerTurn) {\n          setTimeout(this.makeCpuAttack, 1500);\n        }\n      }\n    );\n  }\n\n  shouldAcceptAttack(type) {\n    if (!this.state.playerReady) return false;\n    if (!this.state.playerTurn && type === \"click\") return false;\n    if (this.state.cpuBoard.isAllSunk()) return false;\n    if (this.state.playerBoard.isAllSunk()) return false;\n    return true;\n  }\n\n  makeCpuAttack() {\n    this.game.cpu.enemyBoard = this.state.playerBoard;\n    const [x, y] = this.game.cpu.attackRandom();\n    const cell = document.querySelector(\n      `.playerOneArea .cell[row=\"${x}\"][col=\"${y}\"]`\n    );\n    this.handleAttack({\n      target: cell,\n      getAttribute: (axis) => (axis === \"row\" ? x : y),\n    });\n  }\n\n  dragShips({ target }) {\n    if (!target.classList.contains(\"ship\")) return;\n    this.setState({ selectedShipName: target.getAttribute(\"name\") });\n  }\n\n  dragOverCell(event) {\n    const { target } = event;\n    if (!target.classList.contains(\"cell\")) return;\n    const selected = this.state.playerShips[this.state.selectedShipName];\n    const board = this.state.playerBoard;\n    const coords = [+target.getAttribute(\"row\"), +target.getAttribute(\"col\")];\n    const verticalOk = utils.canAddShip(board, selected, ...coords, true);\n    const horizontOk = utils.canAddShip(board, selected, ...coords, false);\n    const align = verticalOk ? true : horizontOk ? false : null;\n    if (align === null) return;\n    const shipCoords = utils.getNewShipCoordinates(selected, ...coords, align);\n    const cells = shipCoords.map(([x, y]) =>\n      document.querySelector(`.playerOneArea .cell[row=\"${x}\"][col=\"${y}\"]`)\n    );\n    cells.forEach((cell) => cell.classList.add(\"canBePlaced\"));\n    event.preventDefault();\n  }\n\n  leaveCell({ target }) {\n    const cells = document.querySelectorAll(\".playerOneArea .cell\");\n    [...cells].forEach((cell) => cell.classList.remove(\"canBePlaced\"));\n  }\n\n  dropOnCell(event) {\n    const { target } = event;\n    if (!target.classList.contains(\"canBePlaced\")) return;\n    const ship = this.state.playerShips[this.state.selectedShipName];\n    const coords = [+target.getAttribute(\"row\"), +target.getAttribute(\"col\")];\n    const board = this.state.playerBoard;\n    const verticalOk = utils.canAddShip(board, ship, ...coords, true);\n    const horizontOk = utils.canAddShip(board, ship, ...coords, false);\n    const align = verticalOk ? true : horizontOk ? false : null;\n    this.setState({\n      playerBoard: this.state.playerBoard.addShip(ship, ...coords, align),\n    });\n  }\n\n  removeShip({ target }) {\n    const name = target.parentNode.getAttribute(\"name\");\n    this.setState({ playerBoard: this.state.playerBoard.removeShip(name) });\n  }\n\n  rotateShip({ target }) {\n    if (!target.classList.contains(\"cellWithShip\")) return;\n    let board = this.state.playerBoard.deepClone();\n    const placedShip = this.state.playerBoard.placedShips.find(\n      ({ ship }) => ship.name === target.getAttribute(\"name\")\n    );\n    const origin = placedShip.coordinates[0];\n    const vertical = placedShip.coordinates.every(([x, y]) => y === origin[1]);\n    board = board.removeShip(placedShip.ship.name);\n    if (utils.canAddShip(board, placedShip.ship, ...origin, !vertical)) {\n      board = board.addShip(placedShip.ship, ...origin, !vertical);\n      this.setState({ playerBoard: board });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <GameStatus\n          turn={this.state.playerTurn}\n          setReady={this.setReady}\n          ready={this.state.playerReady}\n          board={\n            this.state.playerTurn ? this.state.playerBoard : this.state.cpuBoard\n          }\n          ships={this.state.playerShips}\n          restart={this.restart}\n        />\n        <div className=\"players\">\n          <PlayerArea\n            className=\"playerOneArea\"\n            name={this.game.player.name}\n            board={this.state.playerBoard}\n            ships={this.state.playerShips}\n            ready={this.state.playerReady}\n            dragShips={this.dragShips}\n            dragOverCell={this.dragOverCell}\n            leaveCell={this.leaveCell}\n            dropOnCell={this.dropOnCell}\n            removeShip={this.removeShip}\n            rotateShip={this.rotateShip}\n          />\n          <PlayerArea\n            className=\"playerTwoArea\"\n            name={this.game.cpu.name}\n            board={this.state.cpuBoard}\n            onClick={this.handleAttack}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}